program = { statement }

statement = expression | print

print = 'print', '(', (expression ), ')'

digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

number = digit, { digit }

expression = term, { ('+' | '-'), term }

term = factor, { ('*' | '/'), factor }

factor = number | '(', expression, ')'

comment = '//', { character }, '\n'





// Grammar:

// program = { statement }

// statement = expression | if | while | assignment | print | declaration | for

// print = 'print', '(', expression, ')' | 'print', '(', string, ')'

// digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

// number = digit, { digit } 

// float = number, '.', number 

// boolean = 'true' | 'false'

// string = '"', { character }, '"'

// character = letter | digit | symbol

// letter = 'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'

// identifier = letter, { letter | digit }

// expression = logical_expr 

// logical_expr = relational_expr, { ('&&' | '||'), relational_expr } | '!', logical_expr

// relational_expr = additive_expr, { ('<' | '>' | '<=' | '>=' | '==' | '!='), additive_expr } 

// additive_expr = term, { ('+' | '-'), term }

// term = factor, { ('*' | '/' | '%'), factor }

// factor = number | identifier | boolean | '(', expression, ')' | float

// block = '{', { statement }, '}' | statement 

// if =  'if', '(', expression, ')', block, [ 'else', block ] 

// while = 'while', '(', expression, ')', block 

// for = 'for', '(', [ assignment ], ';', [ expression ], ';', [ assignment ], ')', block | 'for', '(', [ declaration ], ';', [ expression ], ';', [ assignment ], ')', block

// assignment = identifier, '=', expression 

// declaration = 'var', identifier, '=', expression

// comment = '//', { character }, '\n'
